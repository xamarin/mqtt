<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TcpChannelProvider_TcpListener_Failed" xml:space="preserve">
    <value>An error occurred while starting to listen incoming TCP connections</value>
  </data>
  <data name="ServerPacketListener_FirstPacketMustBeConnect" xml:space="preserve">
    <value>The first packet sent by a Client must be a Connect. The connection will be closed.</value>
  </data>
  <data name="ServerPacketListener_KeepAliveTimeExceeded" xml:space="preserve">
    <value>The keep alive tolerance of {0} seconds has been exceeded and no packet has been received from client {1}. The connection will be closed.</value>
  </data>
  <data name="ServerPacketListener_NoConnectReceived" xml:space="preserve">
    <value>No connect packet has been received since the network connection was established. The connection will be closed.</value>
  </data>
  <data name="ServerPacketListener_SecondConnectNotAllowed" xml:space="preserve">
    <value>Only one Connect packet is allowed. The connection will be closed.</value>
  </data>
  <data name="SessionRepository_ClientSessionNotFound" xml:space="preserve">
    <value>No session has been found for client {0}</value>
  </data>
  <data name="Tracer_ConnectionProvider_ClientDisconnected" xml:space="preserve">
    <value>Server - The connection for client {0} is not connected. Removing connection</value>
  </data>
  <data name="Tracer_ConnectionProvider_ClientIdExists" xml:space="preserve">
    <value>An active connection already exists for client {0}. Disposing current connection and adding the new one</value>
  </data>
  <data name="Tracer_ConnectionProvider_RemovingClient" xml:space="preserve">
    <value>Server - Removing connection of client {0}</value>
  </data>
  <data name="Tracer_DisconnectFlow_Disconnecting" xml:space="preserve">
    <value>Server - Disconnecting client {0}</value>
  </data>
  <data name="Tracer_Disposing" xml:space="preserve">
    <value>Disposing {0}</value>
  </data>
  <data name="Tracer_PacketChannelCompleted" xml:space="preserve">
    <value>Server - Packet Channel observable sequence has been completed for client {0}</value>
  </data>
  <data name="Tracer_ServerPacketListener_ConnectionError" xml:space="preserve">
    <value>Server - An error occurred while executing the connect flow. Client: {0}</value>
  </data>
  <data name="Tracer_ServerPacketListener_ConnectPacketReceived" xml:space="preserve">
    <value>Server - A connect packet has been received from client {0}</value>
  </data>
  <data name="Tracer_ServerPacketListener_DispatchingMessage" xml:space="preserve">
    <value>Server - Dispatching {0} message to flow {1} for client {2}</value>
  </data>
  <data name="Tracer_ServerPacketListener_DispatchingPublish" xml:space="preserve">
    <value>Server - Dispatching Publish message to flow {0} for client {1} and topic {2}</value>
  </data>
  <data name="Tracer_ServerPacketListener_Error" xml:space="preserve">
    <value>Server - An error occurred while listening and dispatching packets - Client: {0}</value>
  </data>
  <data name="Tracer_ServerPublishReceiverFlow_SendingWill" xml:space="preserve">
    <value>Server - Sending last will message of client {0} to topic {1}</value>
  </data>
  <data name="Tracer_ServerPublishReceiverFlow_TopicNotSubscribed" xml:space="preserve">
    <value>The topic {0} has no subscribers, hence the message sent by {1} will not be forwarded</value>
  </data>
  <data name="Tracer_ServerSubscribeFlow_ErrorOnSubscription" xml:space="preserve">
    <value>Server - An error occurred when subscribing client {0} to topic {1}</value>
  </data>
  <data name="Tracer_ServerSubscribeFlow_InvalidTopicSubscription" xml:space="preserve">
    <value>Server - The topic {0}, sent by client {1} is invalid. Returning failure code</value>
  </data>
  <data name="Tracer_Server_CleanedOldSession" xml:space="preserve">
    <value>Server - Cleaned old session for client {0}</value>
  </data>
  <data name="Tracer_Server_CreatedSession" xml:space="preserve">
    <value>Server - Created new session for client {0}</value>
  </data>
  <data name="Tracer_Server_DeletedSessionOnDisconnect" xml:space="preserve">
    <value>Server - Removed session for client {0} as part of Disconnect flow</value>
  </data>
  <data name="Tracer_Server_NewSocketAccepted" xml:space="preserve">
    <value>Server - A new TCP channel has been accepted</value>
  </data>
  <data name="Tracer_Server_PacketsObservableCompleted" xml:space="preserve">
    <value>Server - Packet observable sequence has been completed, hence closing the channel</value>
  </data>
  <data name="Tracer_Server_PacketsObservableError" xml:space="preserve">
    <value>Server - Packet observable sequence had an error, hence closing the channel</value>
  </data>
</root>