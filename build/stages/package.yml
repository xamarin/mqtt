# Package Stage

stages:
- stage: Package
  dependsOn: Test
  jobs:
  - job: Upload
    displayName: 'Upload to Storage'
    timeoutInMinutes: 10
    pool:
       name: $(WindowsEOPoolName)
       demands:
       - ImageOverride -equals $(WindowsImageOverride)
    steps:
    - checkout: self

    - task: DownloadBuildArtifacts@1
      displayName: 'Download Packages'
      inputs:
        artifactName: packages
        downloadPath: '$(Build.ArtifactStagingDirectory)/packages'

    - template: upload-to-storage/win/v1.yml@templates
      parameters:
        ArtifactsDirectory: '$(Build.ArtifactStagingDirectory)/packages'
        Azure.ContainerName: 'mqtt'
        GitHub.Context: 'VSTS: Artifacts'
        GitHub.FileStatuses: true
        GitHub.ArtifactsTraversal: 'TopLevel'

  - job: Push
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], variables['MainBranch']))
    timeoutInMinutes: 10
    pool:
      name: VSEngSS-MicroBuild2022-1ES
    steps:
    - checkout: self

    - task: DownloadBuildArtifacts@1
      displayName: 'Download Packages'
      inputs:
        artifactName: packages
        downloadPath: '$(Build.ArtifactStagingDirectory)/packages'

    - task: NuGetCommand@2
      displayName: 'NuGet Update'
      inputs:
        command: custom
        arguments: 'update -self'

     # https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-security-configuration/configuration-guides/pat-burndown-guidance#authentication-from-pipelines
    # Requires Azure client 2.x
    - task: AzureCLI@2
      displayName: 'Set NuGet Token'
      #condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['PushPackages'], 'true')))
      enabled: true
      inputs:
        azureSubscription: 'xamarin-impl-public-feed'   # Azure DevOps service connection
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # if this fails, check out this bash script that includes diagnostics:
          # https://gist.github.com/johnterickson/19f80a3e969e39f1000d118739176e62
          # Note that the resource is specified to limit the token to Azure DevOps
          $token = az account get-access-token --query accessToken --resource 499b84ac-1321-427f-aa17-267ca6975798 -o tsv
          Write-Host "Setting AzDO.XamarinImplToken"
          Write-Host "##vso[task.setvariable variable=AzDO.XamarinImplToken;issecret=true]${token}"

    - powershell: |
        Write-Host "Adding NuGet source feed ..."
        dotnet nuget add source https://pkgs.dev.azure.com/azure-public/vside/_packaging/xamarin-impl/nuget/v3/index.json --name https://pkgs.dev.azure.com/azure-public/vside/_packaging/xamarin-impl/nuget/v3/index.json --username "notUsed" --password '$(AzDO.XamarinImplToken)'
        Write-Host "Push ..."
        Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)/package" -Recurse -Filter *.nupkg | ForEach-Object {
          dotnet nuget push $_.FullName --source https://pkgs.dev.azure.com/azure-public/vside/_packaging/xamarin-impl/nuget/v3/index.json --api-key 'AzureDevOps'
        }
      displayName: 'Push Packages'
