# Build Stage

stages:
- stage: Build
  jobs:
  - job: Windows
    timeoutInMinutes: 60
    pool:
      name: VSEngSS-MicroBuild2022-1ES
    templateContext:
      outputs:
      - output: pipelineArtifact
        displayName: 'Publish Artifact: packages'
        condition: always()
        targetPath: '$(Build.SourcesDirectory)\pack'
        artifactName: packages
      - output: pipelineArtifact
        displayName: 'Publish Artifact: unit-tests'
        condition: always()
        targetPath: '$(Build.SourcesDirectory)\src\Tests\bin\$(Configuration)'
        artifactName: unit-tests
        sbomEnabled: false
        codeSignValidationEnabled: false
      - output: pipelineArtifact
        displayName: 'Publish Artifact: integration-tests'
        condition: always()
        targetPath: '$(Build.SourcesDirectory)\src\IntegrationTests\bin\$(Configuration)'
        artifactName: integration-tests
        sbomEnabled: false
        codeSignValidationEnabled: false
      - output: pipelineArtifact
        displayName: 'Publish Artifact: logs'
        condition: always()
        targetPath: '$(Build.ArtifactStagingDirectory)\binlogs'
        artifactName: logs
        sbomEnabled: false
        codeSignValidationEnabled: false
      - output: pipelineArtifact
        displayName: 'Publish Artifact: symbols'
        condition: always()
        targetPath: '$(Build.ArtifactStagingDirectory)/Symbols'
        artifactName: symbols
        sbomEnabled: false
        codeSignValidationEnabled: false
    steps:
    - checkout: self
      clean: true

    - task: UseDotNet@2
      displayName: 'Use .Net Core SDK $(DotNetCoreVersion)'
      inputs:
        version: '$(DotNetCoreVersion)'
      condition: always()

    - script: 'mkdir "$(Build.ArtifactStagingDirectory)\binlogs"'
      displayName: 'Create Logs Dir'
      condition: always()

    - powershell: |
        $branch = '$(Build.SourceBranch)'
        $codeSignOverride = if ($env:XAMARIN_CODESIGNOVERRIDE) { $env:XAMARIN_CODESIGNOVERRIDE } else { '' }
        if($branch -eq '$(MainBranch)' -or $codeSignOverride -eq 'true') {
          $codeSignOverride = 'true'
        }
        Write-Host "Code Sign Override: $codeSignOverride"
        Write-Host "##vso[task.setvariable variable=Xamarin.CodeSignOverride]$codeSignOverride"
      name: 'SetCodeSignOnMain'
      displayName: 'Evaluate CodeSign for Main Branch'

    # Compute (set) Xamarin.IsRelease and Xamarin.SignType needed in subsequent conditions
    - template: jenkins-codesign/signType.v1.yml@templates
      parameters:
        CodeSignOverride: $(Xamarin.CodeSignOverride)

    - task: MicroBuildSigningPlugin@4
      displayName: "Prepare Signing Tools (MicroBuild)"
      inputs:
        signType: '$(Xamarin.SignType)'
        feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
      env:
        TeamName: '$(TeamName)'

    # Ensure we clear bot-provided feeds, for reliability
    - powershell: |
        $configPath = "$(Build.SourcesDirectory)\NuGet.Config"
        [xml]$config = get-content $configPath
        $config.configuration.packageSources.PrependChild($config.CreateElement("clear"))
        $config.Save($configPath)
      displayName: 'Ensure Clean NuGet Sources'
      condition: always()

    - task: NuGetCommand@2
      displayName: 'Restore Packages'
      inputs:
        restoreSolution: '$(Build.SourcesDirectory)/src/Hermes.sln'
        feedsToUse: config
        nugetConfigPath: '$(Build.SourcesDirectory)/NuGet.Config'
      condition: always()

    - task: MSBuild@1
      displayName: 'Build Solution'
      inputs:
        solution: '$(Build.SourcesDirectory)/src/Hermes.sln'
        msbuildArguments: /t:Build /p:_SignFiles=true /noautoresponse /bl:"$(Build.ArtifactStagingDirectory)\binlogs\build.binlog"
      condition: always()

    - task: MicroBuildCodesignVerify@3
      displayName: 'Verify Signed Files'
      inputs:
        TargetFolders: $(System.DefaultWorkingDirectory)\pack
        ExcludeSNVerify: true
        ApprovalListPathForCerts: $(Build.SourcesDirectory)\build\sign-verify-ignore.txt

    - task: CopyFiles@2
      displayName: 'Copy Symbols'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/src/Server/bin/$(Configuration)'
        Contents: |
          **/System.Net.Mqtt.?(dll|pdb)
          **/System.Net.Mqtt.Server.?(dll|pdb)
        TargetFolder: '$(Build.ArtifactStagingDirectory)/Symbols'
        CleanTargetFolder: true
        FlattenFolders: true
        OverWrite: true # Check if we should copy to $(TargetFramework) subfolders instead
      condition: always()
