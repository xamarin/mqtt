<?xml version="1.0" encoding="utf-8"?>
<!--
	The MIT License (MIT)

	Copyright (c) 2015 Daniel Cazzulino

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
-->
<Project ToolsVersion="4.0" DefaultTargets="Build" InitialTargets="Configure" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup>
		<Configuration Condition=" '$(Configuration)' == '' ">Release</Configuration>
		<IntermediateOutputPath>.nuget\</IntermediateOutputPath>
		<PackagesPath>$(IntermediateOutputPath)packages</PackagesPath>
		<Out Condition=" '$(Out)' == '' ">out</Out>
		<GitInfoReportImportance>high</GitInfoReportImportance>
		<GitIgnoreTagVersion>true</GitIgnoreTagVersion>
		<GitIgnoreBranchVersion>true</GitIgnoreBranchVersion>
		<CommonBuildProperties>TrackFileAccess=false;WarningLevel=0;NoWarn=1591;RunCodeAnalysis=false;Configuration=$(Configuration)</CommonBuildProperties>
	</PropertyGroup>

	<ItemGroup>
		<!-- Solutions at the root of the src directory are all built automatically unless overriden -->
		<Solution Include="src\*.sln" Condition="'$(Solution)' == ''" />		
		<Solution Include="$(Solution)" Condition="'$(Solution)' != ''" />
		<!-- TODO: include IntegrationTests -->
		<TestProject Include="src\**\Tests.csproj" />
		<NuSpec Include="src\**\*.nuspec" />
	</ItemGroup>

	<Target Name="Clean">
		<MSBuild Projects="@(Solution)" Properties="$(CommonBuildProperties)" Targets="Clean" />
		<Exec Command="rmdir $(Out) /S /Q" ContinueOnError="true" />
		<Exec Command="rmdir $(PackagesPath) /S /Q" ContinueOnError="true" />
		<Exec Command="rmdir src\packages /S /Q" ContinueOnError="true" />
	</Target>

	<Target Name="Rebuild" DependsOnTargets="Clean;Build" />

	<Target Name="Build" DependsOnTargets="GitVersion">
		<MSBuild Projects="@(Solution)" Properties="$(CommonBuildProperties)" />
	</Target>
	
	<Target Name="Test"><!--  DependsOnTargets="Build" -->
		<MSBuild Projects="@(TestProject)" BuildInParallel="true" Targets="GetTargetPath" Properties="$(CommonBuildProperties)">
			<Output TaskParameter="TargetOutputs" ItemName="_TestAssembly" />
		</MSBuild>

		<ItemGroup>
			<TestAssembly Include="@(_TestAssembly)" Condition=" Exists('%(_TestAssembly.FullPath)') " />
		</ItemGroup>

		<MakeDir Directories="$(Out)" Condition="!Exists('$(Out)')" />

		<PropertyGroup>
			<XunitConsole>$(PackagesPath)\xunit.runner.console\tools\xunit.console.x86.exe</XunitConsole>
			<XunitOptions>$(XunitOptions) -html $(Out)\test.html -xml $(Out)\test.xml -parallel all -noshadow</XunitOptions>

			<CoverageConsole>$(PackagesPath)\OpenCover\tools\OpenCover.Console.exe</CoverageConsole>
			<CoverageOptions>$(CoverageOptions) -output:$(Out)\coverage.xml -nodefaultfilters -returntargetcode -register:user -filter:"+[System.Net.Mqtt*]* -[System.Runtime*]* -[System.Core*]* -[System.Linq*]* -[System.Configuration*]* -[System.Web*]* -[System]* -[xunit*]* -[Tests]* -[IntegrationTests]* -[*]*ThisAssembly* -[*]*IFluentInterface*" -excludebyattribute:*ExcludeFromCodeCoverage*;*CompilerGenerated* -skipautoprops -showunvisited -mergebyhash</CoverageOptions>
			<CoverageCommand>$(CoverageConsole) $(CoverageOptions) -target:$(XunitConsole) -targetargs:"@(TestAssembly, ' ') $(XunitOptions)"</CoverageCommand>
		</PropertyGroup>

		<Message Importance="high" Text="Executing: $(CoverageCommand)" />
		<Exec Command="$(CoverageCommand)" ContinueOnError="ErrorAndContinue" />
	</Target>

	<Target Name="Package" DependsOnTargets="Build">
		<MakeDir Directories="$(Out)" Condition=" !Exists('$(Out)') " />
		<Exec Command='"$(NuGet)" Pack "%(NuSpec.Identity)" $(Args) -Properties Id=%(NuSpec.Filename);Configuration=$(Configuration) -Version $(Version) -OutputDirectory $(Out)' />
	</Target>

	<Target Name="Publish" DependsOnTargets="Package">
		<Exec Command='$(NuGet) Push "$(Out)\%(NuSpec.Filename).$(Version).nupkg" $(NuGetPushArgs)'
						StandardErrorImportance="high"
						StandardOutputImportance="normal" />

		<Message Text="Published new package: Id=%(NuSpec.Filename), Version=$(Version)"
				 Importance="high" />
	</Target>

	<!-- Configure and restore initial targets and packages -->
	<Import Project="src\NuGet.Restore.targets" />
	<PropertyGroup>
		<GitInfoTargets>$(PackagesPath)\GitInfo\build\GitInfo.targets</GitInfoTargets>
		<PendingRestore Condition=" !Exists('$(GitInfoTargets)') ">true</PendingRestore>
	</PropertyGroup>

	<Target Name="GitVersion" />
	<!-- Gets overriden by the $(GitInfoTargets) if it exists -->
	<Import Project="$(GitInfoTargets)" Condition=" Exists('$(GitInfoTargets)') " />

	<Target Name="Configure" DependsOnTargets="_GetNuGet;GitVersion">
		<!-- We always run NuGet Install since it already checks for already-installed packages and skips them -->
		<Exec Command='"$(NuGet)" Install "$(MSBuildThisFileDirectory)packages.config" -OutputDirectory "$(PackagesPath)" -ExcludeVersion' />

		<!-- Errors if nuget packages were restored during the build -->
		<Error Text="Required build-time NuGet packages were missing and were just restored. Please run the build again."
			   Condition=" '$(PendingRestore)' == 'true' And '$(target)' != 'configure' "/>

		<PropertyGroup>
			<Version>$(GitSemVerMajor).$(GitSemVerMinor).$(GitSemVerPatch)$(GitSemVerDashLabel)</Version>
		</PropertyGroup>

		<!-- Update AppVeyor build # to match the actual one being used -->
		<Exec Command="appveyor UpdateBuild -Version $(Version)" Condition=" '$(APPVEYOR)' == 'true' "
              ConsoleToMSBuild="true"
              ContinueOnError="ErrorAndContinue" />
	</Target>

</Project>